function TimeSeriesChart( data, options, renderTo ) {
	"use strict";		

	var redraw, setTotal, drillDown, setButtonsFor, toggleChartTypeTo, setRangeBrowseButtons, update, setXAxis, setLegend, chart_options, setDateRangeLabel, showEnvironment, chart,  setData,  setYAxis,  series_name,   createChart, clearTotal;
	chart_options = options;

  // ToDo Add validation for configuration object
  // and provide meaningful error if incorrect
	createChart = function () {
		series_name = chart_options.legend.text;	

		return new Highcharts.Chart({
			chart: {
				height: 270,
				renderTo: renderTo ? renderTo : 'chart',
				type: 'column'

			}, title: {
		    text: ' '

		  }, legend: {

				floating: true,
				align: 'right',
				verticalAlign: 'top',
				x: 0, y: 0,
				borderWidth: 0

			}, tooltip: {
				formatter: function () {
					return this.point.tooltip;
				}

			}, xAxis: {
				id: 'xAxis',
				categories: chart_options.xaxis.labels,
				title: {
					text: chart_options.xaxis.name
				}

			}, yAxis: {
				id: 'yAxis',
				title: {
					text: chart_options.yaxis.name
				},
				max: chart_options.yaxis.max

			}, credits: {
				enabled: false

			}, series: [{
				id: series_name,
				name: series_name,
				data: data,
				color: chart_options.legend.color,
				events: {
					legendItemClick: function (event) {
						return false;
					}
				},
				cursor: 'pointer',
				point: {
	        events: {
	          click: drillDown
	        }
	      }
			}]
		});	
	};
	
	setLegend = function (text) {		
		var series = chart.get(series_name);
		series.name = text;
		series.legendItem = series.legendItem.destroy();
		chart.isDirtyLegend = true;
	};
	
	setData = function (data, color) {
		var series = chart.get(series_name);
		series.setData(data, false);
		series.color = color;
	};
	
	setXAxis = function (labels, name) {
		var xAxis = chart.get('xAxis');
		$(xAxis.axisTitle.element).text(name);	
		xAxis.setCategories(labels, false);
	};
	
	setYAxis = function (max, name) {
		var yAxis = chart.get('yAxis');
		yAxis.setExtremes(0, max, false);	
		$(yAxis.axisTitle.element).text(name);
	};
	
	redraw = function () {
		chart.redraw();
	};
  	
	drillDown = function () {

		if (chart_options.drill_down_url === null) { return; }
		
		chart.showLoading();
		
		var xIndex = $.inArray( this.category, chart_options.xaxis.labels );
		var drill_down_url = chart_options.drill_down_url + "?x=" + xIndex;	
		
		$.getJSON( drill_down_url, function ( results ) {
			update( results.data, results );
			chart.hideLoading();

      //ToDo Handle error here
		}).error( function ( xhr, status, error ) { chart.hideLoading(); } );
	};
	
	setDateRangeLabel = function ( date ) {
    var date_range_action = new Array();
    date_range_action[true] = '';
    date_range_action[false] = date;
    $('.data-range').text( date_range_action[date === null]);
	};

  setButtonsFor = function( type, klass )	{
    var klasses_for = {
      'period':[ '.1D', '.1W', '.1M', '.1Y', '.All' ],
      'metric':[ '.energy', '.value', '.environment' ]
    }

		$.each( klasses_for[ type ], function( i, button ) {
      //if ( button != '.' + klass ){
		    $( button ).removeClass( 'active' );
		    $( button + " a" ).blur();
      //}
		});

		$( "." + klass ).addClass( 'active' ).focus();
  };

	setRangeBrowseButtons = function ( period, at_start, at_end ) {

    var toggleClassesToActive = function( klasses ){
      $.each( klasses, function( i, klass ){
		    $( klass ).removeClass( 'inactive' );
			  $( klass ).addClass( 'active' );
      });
    };

    var toggleClassesToInActive = function( klasses ){
      $.each( klasses, function( i, klass ){
			  $( klass ).removeClass( 'active' );
		    $( klass ).addClass( 'inactive' );
      });
    };

    toggleClassesToActive( [ '.prev', '.next', '.first', '.last' ] );
		if ( at_start        ) { toggleClassesToInActive( [ '.prev', '.first' ]                   ); }
    if ( at_end          ) { toggleClassesToInActive( [ '.next', '.last'  ]                   ); }
		if ( period == 'All' ) { toggleClassesToInActive( [ '.prev', '.next', '.first', '.last' ] ); }
	};

  clearTotal = function () {
		$('li li.chart-total b').html('&nbsp;');
	};
	
	setTotal = function (total) {
		$('li.active li.chart-total b').text(total);
	};

  var prepEnvNumbers = function( number ){
    var wrapper = { open:"<em><strong><span>", close:"</span></strong></em>" };
    return wrapper['open'] + number.toString().split('').join("</span><span>") + wrapper['close'];
  }

	showEnvironment = function( options ){
    var co2    = prepEnvNumbers( options.total.co2 );
    var trees  = prepEnvNumbers( options.total.trees );
    var offset = prepEnvNumbers( options.total.miles );
     	
    $( "#env-co2" ).html( co2 );
    $( "#env-car" ).html( offset );
    $( "#env-tree" ).html( trees );

    toggleChartTypeTo( options.metric_type );

    $( "#env-car" ).show();
    $( "#env-co2" ).show();
    $( "#env-tree" ).show();
  };

  toggleChartTypeTo = function( type ) {
    if ( type != 'environment' ){
      $( "#environment-content" ).hide();
      $( "#chart" ).show();
      $( "#highcharts-0" ).show();
    } else {
      $( "#highcharts-0" ).hide();
      $( "#environment-content" ).show();
    }
  };
	// Having this as a local method allows
  // it to be in scope for methods
  // like drillDown
	update = function (data, options) {
		// ToDo Duplication between this method and
    // the initial configuration of the chart
    // should be removed
		chart_options = options;
    toggleChartTypeTo( chart_options.metric_type );
		setDateRangeLabel( chart_options.range_label );
    setButtonsFor( 'period', chart_options.period );
    setButtonsFor( 'metric', chart_options.metric_type);
		setRangeBrowseButtons( chart_options.period, chart_options.at_start, chart_options.at_end);

    if ( chart_options.metric_type == 'environment' ){
      showEnvironment( options );
      return;
    }
		setTotal( chart_options.total );
		setYAxis( chart_options.yaxis.max, chart_options.yaxis.name);
		setXAxis( chart_options.xaxis.labels, chart_options.xaxis.name);
		setLegend( chart_options.legend.text );
		setData( data, chart_options.legend.color);
		redraw();
	};
	this.showLoading = function () { chart.showLoading(); };
	this.hideLoading = function () { chart.hideLoading(); };
  this.clearTotal  = function () { clearTotal();        };

  this.setTotal    = function ( total )       { setTotal();            };
	this.update      = function (data, options) { update(data, options); };

	chart = createChart();	
	return this;
}
